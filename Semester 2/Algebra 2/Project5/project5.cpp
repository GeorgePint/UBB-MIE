#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric> // for std::iota
#include <set>
#include <iterator>

using namespace std;

// Function to calculate factorial
int factorial(int n) {
    int res = 1;
    for (int i = 1; i <= n; ++i)
        res *= i;
    return res;
}

// Function to calculate gcd
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Function to calculate lcm of two numbers
int lcm(int a, int b) {
    return a * (b / gcd(a, b));
}

// Function to generate all permutations of {1, 2, ..., n}
vector<vector<int>> generate_permutations(int n) {
    vector<int> perm(n);
    iota(perm.begin(), perm.end(), 1);

    vector<vector<int>> permutations;
    do {
        permutations.push_back(perm);
    } while (next_permutation(perm.begin(), perm.end()));

    return permutations;
}

// Function to find order of an element in Sn
int find_order(const vector<int>& perm) {
    int n = perm.size();
    vector<bool> visited(n, false);
    int order = 1;

    for (int i = 0; i < n; ++i) {
        if (!visited[i]) {
            int cycle_length = 0;
            int j = i;
            while (!visited[j]) {
                visited[j] = true;
                j = perm[j] - 1;
                cycle_length++;
            }
            order = lcm(order, cycle_length);
        }
    }
    return order;
}

// Function to print permutations
void print_permutations(const vector<vector<int>>& permutations) {
    for (const auto& perm : permutations) {
        cout << "{ ";
        for (int val : perm) {
            cout << val << " ";
        }
        cout << "} ";
    }
    cout << endl;
}

// Function to multiply two permutations
vector<int> multiply_permutations(const vector<int>& perm1, const vector<int>& perm2) {
    int n = perm1.size();
    vector<int> result(n);
    for (int i = 0; i < n; ++i) {
        result[i] = perm1[perm2[i] - 1];
    }
    return result;
}

// Function to find cyclic subgroup generated by a permutation
set<vector<int>> find_cyclic_subgroup(const vector<int>& perm) {
    set<vector<int>> subgroup;
    vector<int> current = perm;
    do {
        subgroup.insert(current);
        current = multiply_permutations(current, perm);
    } while (current != perm);
    return subgroup;
}

// Function to check if a subgroup is normal
bool is_normal_subgroup(const vector<vector<int>>& group, const set<vector<int>>& subgroup) {
    for (const auto& g : group) {
        for (const auto& h : subgroup) {
            vector<int> gh = multiply_permutations(g, h);
            vector<int> ghg_inv = multiply_permutations(gh, g);
            if (subgroup.find(ghg_inv) == subgroup.end()) {
                return false;
            }
        }
    }
    return true;
}

// Function to generate subgroups
vector<set<vector<int>>> generate_subgroups(const vector<vector<int>>& permutations) {
    vector<set<vector<int>>> subgroups;
    for (const auto& perm : permutations) {
        set<vector<int>> cyclic_subgroup = find_cyclic_subgroup(perm);
        subgroups.push_back(cyclic_subgroup);
    }
    return subgroups;
}

// Function to find normal subgroups
vector<set<vector<int>>> find_normal_subgroups(const vector<set<vector<int>>>& subgroups, const vector<vector<int>>& permutations) {
    vector<set<vector<int>>> normal_subgroups;
    for (const auto& subgroup : subgroups) {
        if (is_normal_subgroup(permutations, subgroup)) {
            normal_subgroups.push_back(subgroup);
        }
    }
    return normal_subgroups;
}

// Function to print subgroups
void print_subgroups(const vector<set<vector<int>>>& subgroups) {
    for (const auto& subgroup : subgroups) {
        cout << "{ ";
        for (const auto& perm : subgroup) {
            cout << "{ ";
            for (int val : perm) {
                cout << val << " ";
            }
            cout << "} ";
        }
        cout << "}" << endl;
    }
}

int main() {
    int n;
    cout << "Enter n: ";
    cin >> n;

    if (n < 2) {
        cout << "n should be at least 2." << endl;
        return 1;
    }

    // Generate elements of Sn
    vector<vector<int>> permutations = generate_permutations(n);

    cout << "Elements of the group (S" << n << ", o) are: " << endl;
    print_permutations(permutations);

    cout << "Orders of the elements of the group (S" << n << ", o) are: " << endl;
    for (const auto& perm : permutations) {
        cout << "Order of ";
        for (int val : perm) {
            cout << val << " ";
        }
        cout << " is " << find_order(perm) << endl;
    }

    // Generate subgroups
    vector<set<vector<int>>> subgroups = generate_subgroups(permutations);

    cout << "Subgroups of the group (S" << n << ", o) are: " << endl;
    print_subgroups(subgroups);

    // Find normal subgroups
    vector<set<vector<int>>> normal_subgroups = find_normal_subgroups(subgroups, permutations);

    cout << "Normal subgroups of the group (S" << n << ", o) are: " << endl;
    print_subgroups(normal_subgroups);

    return 0;
}
